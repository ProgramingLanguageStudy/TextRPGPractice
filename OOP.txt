 객체 지향의 4대 핵심

 1. 캡슐화
 - 각 객체의 내부 정보는 각 개체 안에 은닉한다.
 - 외부에서는 내부에 직접 접근하지 못하게 막고,
 반드시 함수를 통해 간접적으로 사용하게 하는 것.
 접근 제어자(public, private, protected), Getter/Setter 함수
 안정성

 -> 멤버 변수와 내부에서만 쓰는 함수는 private으로 숨긴다.

 2. 상속
 - 클래스끼리 계층 구조를 만들어 코드를 재사용할 수 있게 한다.
 - 부모 클래스의 변수와 함수를 자식 클래스가 물려받는 것
 - class 자식클래스명 : public 부모클래스명
 - 코드 재사용성

 -> 추상적인 부모 클래스를 만들고 구체적인 기능은 자식 클래스에서 구현한다.

 3. 다형성
 - 하나의 인터페이스로 여러 종류의 객체를 처리할 수 있게 하는 것
 - 부모 클래스 변수로 자식 클래스 객체를 다룰 수 있다.
 - 유연성

 -> 상속 + 가상 함수(virtual-override)

 4. 추상화
 - 공통성을 모아 추출
 - 필요한 부분만 보여 주고, 불필요한 내부 구현은 숨기는 것
 - 인터페이스(추상 클래스, 순수 가상 함수 등)를 활용
 - 설계 효율성

 -> 상속을 활용한 효율적인 설계 + 인터페이스 활용

 => SOLID 원칙